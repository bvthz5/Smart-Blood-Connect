version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smartblood-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: smartblood
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - smartblood-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d smartblood"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Flask API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smartblood-backend
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql+psycopg2://postgres:123@postgres:5432/smartblood
      - JWT_SECRET_KEY=your-jwt-secret-key-change-this-in-production
      - OTP_SECRET=your-otp-secret-change-this-in-production
      - ADMIN_EMAIL=smartblooda@gmail.com
      - ADMIN_PASSWORD=Admin@123
      - ACCESS_EXPIRES_MINUTES=15
      - REFRESH_EXPIRES_DAYS=7
      - SECRET_KEY=your-flask-secret-key-change-this-in-production
      - HOST=0.0.0.0
      - PORT=5000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - smartblood-network
    volumes:
      - ./backend:/app
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 10 &&
        python -c 'from app import create_app; create_app()' &&
        echo 'Starting Flask server...' &&
        python run.py
      "

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smartblood-frontend
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - smartblood-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: smartblood-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smartblood-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  smartblood-network:
    driver: bridge
