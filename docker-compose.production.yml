version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smartblood-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: smartblood
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SmartBlood2024!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - smartblood-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d smartblood"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Backend Flask API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: smartblood-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-SmartBlood2024!}@postgres:5432/smartblood
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: smartblood
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD:-SmartBlood2024!}
      
      # Flask Configuration
      FLASK_ENV: production
      FLASK_APP: run.py
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-jwt-super-secret-key-change-in-production}
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # CORS Configuration
      CORS_ORIGINS: http://localhost:3000,http://localhost:5173
      
      # Email Configuration (if needed)
      MAIL_SERVER: ${MAIL_SERVER:-}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME:-}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-}
      MAIL_USE_TLS: ${MAIL_USE_TLS:-true}
      
      # Admin Configuration
      ADMIN_EMAIL: admin@smartblood.com
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-Admin123}
      
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartblood-network
    volumes:
      - backend_logs:/app/logs
    command: >
      sh -c "
        echo 'üöÄ Starting SmartBlood Backend...' &&
        echo '‚è≥ Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'üìä Running database migrations...' &&
        python -c '
        import sys
        sys.path.append(\"/app\")
        from app import create_app, db
        app = create_app()
        with app.app_context():
            db.create_all()
            print(\"‚úÖ Database tables created successfully\")
        ' &&
        echo 'üîê Creating admin user if not exists...' &&
        python -c '
        import sys
        sys.path.append(\"/app\")
        from app import create_app
        from app.models import Admin
        from werkzeug.security import generate_password_hash
        app = create_app()
        with app.app_context():
            admin = Admin.query.filter_by(email=\"admin@smartblood.com\").first()
            if not admin:
                admin = Admin(
                    email=\"admin@smartblood.com\",
                    password_hash=generate_password_hash(\"Admin123\"),
                    name=\"System Administrator\"
                )
                db.session.add(admin)
                db.session.commit()
                print(\"‚úÖ Admin user created successfully\")
            else:
                print(\"‚úÖ Admin user already exists\")
        ' &&
        echo 'üåê Starting Flask development server...' &&
        python run.py
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: smartblood-frontend
    restart: unless-stopped
    environment:
      # API Configuration
      VITE_API_URL: http://localhost:5000
      VITE_APP_NAME: SmartBlood
      VITE_APP_VERSION: 1.0.0
      
      # Environment
      NODE_ENV: production
      PORT: 3000
      
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - smartblood-network
    volumes:
      - frontend_logs:/app/logs
    command: >
      sh -c "
        echo 'üöÄ Starting SmartBlood Frontend...' &&
        echo 'üì¶ Installing dependencies...' &&
        npm install &&
        echo 'üî® Building application...' &&
        npm run build &&
        echo 'üåê Starting development server...' &&
        npm run dev -- --host 0.0.0.0 --port 3000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: smartblood-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smartblood-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: smartblood-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - smartblood-network
    profiles:
      - nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  frontend_logs:
    driver: local

networks:
  smartblood-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
