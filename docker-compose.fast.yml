services:
  # PostgreSQL Database (Optimized for Development)
  postgres:
    image: postgres:15-alpine
    container_name: smartblood-postgres-fast
    restart: unless-stopped
    environment:
      POSTGRES_DB: smartblood
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --auth-host=scram-sha-256 --auth-local=scram-sha-256"
      # Performance optimizations
      POSTGRES_SHARED_PRELOAD_LIBRARIES: "pg_stat_statements"
      POSTGRES_MAX_CONNECTIONS: "100"
      POSTGRES_SHARED_BUFFERS: "256MB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "1GB"
      POSTGRES_WORK_MEM: "4MB"
      POSTGRES_MAINTENANCE_WORK_MEM: "64MB"
    volumes:
      - postgres_fast_data:/var/lib/postgresql/data
      # Add init script if exists
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - smartblood-fast-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d smartblood"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    # Performance optimizations
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c shared_preload_libraries='pg_stat_statements'

  # Backend Flask API (Optimized)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smartblood-backend-fast
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql+psycopg2://postgres:123@postgres:5432/smartblood
      POSTGRES_DB: smartblood
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      
      # JWT Configuration
      JWT_SECRET_KEY: HeVT0Nq4I8tjCUS1Gg1r8Y8c8CA3kvHqm5LKclMvgpLZWyzTgA98D3v95wRl61t0We04_5UygIQePEVc0XUCcg
      OTP_SECRET: dev-otp-secret-change-in-production
      
      # Admin Configuration
      ADMIN_EMAIL: admin@smartblood.com
      ADMIN_PASSWORD: Admin123
      
      # JWT Expiration Settings
      ACCESS_EXPIRES_MINUTES: 15
      REFRESH_EXPIRES_DAYS: 7
      
      # Flask Configuration
      SECRET_KEY: dev-flask-secret-key-change-in-production
      FLASK_ENV: development
      FLASK_DEBUG: 1
      HOST: 0.0.0.0
      PORT: 5000
      
      # Frontend Configuration
      VITE_API_URL: http://localhost:5000
      
      # Python optimizations
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - smartblood-fast-network
    volumes:
      - ./backend:/app
      - /app/__pycache__
      - backend_cache:/app/.cache
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        while ! pg_isready -h postgres -p 5432 -U postgres; do
          echo 'Database not ready, waiting...'
          sleep 2
        done &&
        echo 'Database is ready!' &&
        echo 'Running database migrations...' &&
        python migrate_db.py &&
        echo 'Starting Flask development server...' &&
        python run.py
      "
    # Performance optimizations
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend React App (Optimized)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: smartblood-frontend-fast
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:5000
      # Node.js optimizations
      NODE_ENV: development
      NODE_OPTIONS: "--max-old-space-size=1024"
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - smartblood-fast-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_cache:/app/.npm
    command: >
      sh -c "
        echo 'Installing dependencies...' &&
        npm install --prefer-offline --no-audit &&
        echo 'Starting development server...' &&
        npm run dev -- --host 0.0.0.0
      "
    # Performance optimizations
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

volumes:
  postgres_fast_data:
    driver: local
  backend_cache:
    driver: local
  frontend_cache:
    driver: local

networks:
  smartblood-fast-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
