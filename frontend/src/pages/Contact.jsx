// src/pages/Contact.jsx
import React, { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import '../styles/contact.css';

// Register GSAP plugins
gsap.registerPlugin(ScrollTrigger);

export default function Contact() {
  const [language, setLanguage] = useState('en');
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    message: '',
    type: 'general'
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState(null);
  
  const heroRef = useRef(null);
  const contactRefs = useRef([]);

  // Get language from localStorage
  useEffect(() => {
    const savedLanguage = localStorage.getItem('language') || 'en';
    setLanguage(savedLanguage);
  }, []);

  // Listen for language changes
  useEffect(() => {
    const handleLanguageChange = () => {
      const savedLanguage = localStorage.getItem('language') || 'en';
      setLanguage(savedLanguage);
    };

    window.addEventListener('languageChanged', handleLanguageChange);
    return () => window.removeEventListener('languageChanged', handleLanguageChange);
  }, []);

  // Animation setup
  useEffect(() => {
    if (!heroRef.current) return;

    // Hero animation
    gsap.fromTo(heroRef.current, 
      { opacity: 0, y: 50 },
      { opacity: 1, y: 0, duration: 1, ease: "power3.out" }
    );

    // Contact sections animation
    ScrollTrigger.batch(contactRefs.current, {
      onEnter: (elements) => {
        gsap.fromTo(elements,
          { opacity: 0, y: 40 },
          { 
            opacity: 1, 
            y: 0, 
            duration: 0.8, 
            stagger: 0.2,
            ease: "power3.out"
          }
        );
      },
      start: "top 85%"
    });

    return () => {
      ScrollTrigger.getAll().forEach(trigger => trigger.kill());
    };
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitStatus(null);

    // Simulate form submission
    setTimeout(() => {
      setIsSubmitting(false);
      setSubmitStatus('success');
      setFormData({
        name: '',
        email: '',
        subject: '',
        message: '',
        type: 'general'
      });
    }, 2000);
  };

  const contactInfo = language === 'en' ? [
    {
      icon: 'MapPin',
      title: 'Office Address',
      details: [
        'SmartBlood Connect Headquarters',
        'Technopark Campus, Trivandrum',
        'Kerala, India - 695581'
      ]
    },
    {
      icon: 'üìû',
      title: 'Phone Numbers',
      details: [
        'Emergency Hotline: +91 9847 000 000',
        'Support: +91 471 234 5678',
        'General Inquiries: +91 471 234 5679'
      ]
    },
    {
      icon: 'Email',
      title: 'Email Addresses',
      details: [
        'support@smartbloodconnect.com',
        'emergency@smartbloodconnect.com',
        'partnerships@smartbloodconnect.com'
      ]
    },
    {
      icon: '‚è∞',
      title: 'Working Hours',
      details: [
        'Emergency Services: 24/7',
        'Support Team: 8 AM - 8 PM',
        'Office Hours: 9 AM - 6 PM'
      ]
    }
  ] : [
    {
      icon: 'MapPin',
      title: '‡¥ì‡¥´‡µÄ‡¥∏‡µç ‡¥µ‡¥ø‡¥≤‡¥æ‡¥∏‡¥Ç',
      details: [
        '‡¥∏‡µç‡¥Æ‡¥æ‡µº‡¥ü‡µç‡¥ü‡µç ‡¥¨‡µç‡¥≤‡¥°‡µç ‡¥ï‡¥£‡¥ï‡µç‡¥ü‡µç ‡¥Ü‡¥∏‡µç‡¥•‡¥æ‡¥®‡¥Ç',
        '‡¥ü‡µÜ‡¥ï‡µç‡¥®‡µã‡¥™‡¥æ‡µº‡¥ï‡µç‡¥ï‡µç ‡¥ï‡¥æ‡¥Æ‡µç‡¥™‡¥∏‡µç, ‡¥§‡¥ø‡¥∞‡µÅ‡¥µ‡¥®‡¥®‡µç‡¥§‡¥™‡µÅ‡¥∞‡¥Ç',
        '‡¥ï‡µá‡¥∞‡¥≥‡¥Ç, ‡¥á‡¥®‡µç‡¥§‡µç‡¥Ø - 695581'
      ]
    },
    {
      icon: 'üìû',
      title: '‡¥´‡µã‡µ∫ ‡¥®‡¥Æ‡µç‡¥™‡¥±‡µÅ‡¥ï‡µæ',
      details: [
        '‡¥Ö‡¥ü‡¥ø‡¥Ø‡¥®‡µç‡¥§‡¥∞ ‡¥π‡µã‡¥ü‡µç‡¥ü‡µç‚Äå‡¥≤‡µà‡µª: +91 9847 000 000',
        '‡¥™‡¥ø‡¥®‡µç‡¥§‡µÅ‡¥£: +91 471 234 5678',
        '‡¥™‡µä‡¥§‡µÅ ‡¥Ö‡¥®‡µç‡¥µ‡µá‡¥∑‡¥£‡¥ô‡µç‡¥ô‡µæ: +91 471 234 5679'
      ]
    },
    {
      icon: 'Email',
      title: '‡¥á‡¥Æ‡µÜ‡¥Ø‡¥ø‡µΩ ‡¥µ‡¥ø‡¥≤‡¥æ‡¥∏‡¥ô‡µç‡¥ô‡µæ',
      details: [
        'support@smartbloodconnect.com',
        'emergency@smartbloodconnect.com',
        'partnerships@smartbloodconnect.com'
      ]
    },
    {
      icon: '‚è∞',
      title: '‡¥™‡µç‡¥∞‡¥µ‡µº‡¥§‡µç‡¥§‡¥® ‡¥∏‡¥Æ‡¥Ø‡¥Ç',
      details: [
        '‡¥Ö‡¥ü‡¥ø‡¥Ø‡¥®‡µç‡¥§‡¥∞ ‡¥∏‡µá‡¥µ‡¥®‡¥ô‡µç‡¥ô‡µæ: 24/7',
        '‡¥™‡¥ø‡¥®‡µç‡¥§‡µÅ‡¥£ ‡¥ü‡µÄ‡¥Ç: ‡¥∞‡¥æ‡¥µ‡¥ø‡¥≤‡µÜ 8 - ‡¥µ‡µà‡¥ï‡µÅ‡¥®‡µç‡¥®‡µá‡¥∞‡¥Ç 8',
        '‡¥ì‡¥´‡µÄ‡¥∏‡µç ‡¥∏‡¥Æ‡¥Ø‡¥Ç: ‡¥∞‡¥æ‡¥µ‡¥ø‡¥≤‡µÜ 9 - ‡¥µ‡µà‡¥ï‡µÅ‡¥®‡µç‡¥®‡µá‡¥∞‡¥Ç 6'
      ]
    }
  ];

  const inquiryTypes = language === 'en' ? [
    { value: 'general', label: 'General Inquiry' },
    { value: 'support', label: 'Technical Support' },
    { value: 'partnership', label: 'Partnership' },
    { value: 'media', label: 'Media Inquiry' },
    { value: 'feedback', label: 'Feedback' },
    { value: 'complaint', label: 'Complaint' }
  ] : [
    { value: 'general', label: '‡¥™‡µä‡¥§‡µÅ ‡¥Ö‡¥®‡µç‡¥µ‡µá‡¥∑‡¥£‡¥Ç' },
    { value: 'support', label: '‡¥∏‡¥æ‡¥ô‡µç‡¥ï‡µá‡¥§‡¥ø‡¥ï ‡¥™‡¥ø‡¥®‡µç‡¥§‡µÅ‡¥£' },
    { value: 'partnership', label: '‡¥™‡¥ô‡µç‡¥ï‡¥æ‡¥≥‡¥ø‡¥§‡µç‡¥§‡¥Ç' },
    { value: 'media', label: '‡¥Æ‡µÄ‡¥°‡¥ø‡¥Ø ‡¥Ö‡¥®‡µç‡¥µ‡µá‡¥∑‡¥£‡¥Ç' },
    { value: 'feedback', label: '‡¥´‡µÄ‡¥°‡µç‚Äå‡¥¨‡¥æ‡¥ï‡µç‡¥ï‡µç' },
    { value: 'complaint', label: '‡¥™‡¥∞‡¥æ‡¥§‡¥ø' }
  ];

  return (
    <main className="contact-page">
      {/* Hero Section */}
      <section ref={heroRef} className="contact-hero">
        <div className="container">
          <div className="hero-content">
            <h1 className="hero-title">
              {language === 'en' ? 'Contact Us' : '‡¥û‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥ï'}
            </h1>
            <p className="hero-subtitle">
              {language === 'en'
                ? 'Get in touch with our team. We\'re here to help you 24/7.'
                : '‡¥û‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ü‡µÄ‡¥Æ‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥ï. 24/7 ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥û‡¥ô‡µç‡¥ô‡µæ ‡¥á‡¥µ‡¥ø‡¥ü‡µÜ‡¥Ø‡µÅ‡¥£‡µç‡¥ü‡µç.'}
            </p>
          </div>
        </div>
      </section>

      {/* Contact Information */}
      <section className="contact-info-section">
        <div className="container">
          <div className="contact-grid">
            {contactInfo.map((info, index) => (
              <div
                key={index}
                ref={el => contactRefs.current[index] = el}
                className="contact-card"
              >
                <div className="card-icon">{info.icon}</div>
                <h3 className="card-title">{info.title}</h3>
                <div className="card-details">
                  {info.details.map((detail, detailIndex) => (
                    <p key={detailIndex} className="detail-item">{detail}</p>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Contact Form */}
      <section className="contact-form-section">
        <div className="container">
          <div ref={el => contactRefs.current[4] = el} className="form-container">
            <div className="form-header">
              <h2>
                {language === 'en' ? 'Send us a Message' : '‡¥û‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥í‡¥∞‡µÅ ‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç ‡¥Ö‡¥Ø‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥ï'}
              </h2>
              <p>
                {language === 'en'
                  ? 'Fill out the form below and we\'ll get back to you within 24 hours.'
                  : '‡¥ö‡µÅ‡¥µ‡¥ü‡µÜ‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥´‡µã‡¥Ç ‡¥™‡µÇ‡¥∞‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥û‡¥ô‡µç‡¥ô‡µæ 24 ‡¥Æ‡¥£‡¥ø‡¥ï‡µç‡¥ï‡µÇ‡¥±‡¥ø‡¥®‡µÅ‡¥≥‡µç‡¥≥‡¥ø‡µΩ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥Ç.'}
              </p>
            </div>

            <form onSubmit={handleSubmit} className="contact-form">
              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="name">
                    {language === 'en' ? 'Full Name' : '‡¥™‡µÇ‡µº‡¥£‡µç‡¥£ ‡¥™‡µá‡¥∞‡µç'} *
                  </label>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    required
                    className="form-input"
                    placeholder={language === 'en' ? 'Enter your full name' : '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡µÇ‡µº‡¥£‡µç‡¥£ ‡¥™‡µá‡¥∞‡µç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï'}
                  />
                </div>
                <div className="form-group">
                  <label htmlFor="email">
                    {language === 'en' ? 'Email Address' : '‡¥á‡¥Æ‡µÜ‡¥Ø‡¥ø‡µΩ ‡¥µ‡¥ø‡¥≤‡¥æ‡¥∏‡¥Ç'} *
                  </label>
                  <input
                    type="email"
                    id="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    required
                    className="form-input"
                    placeholder={language === 'en' ? 'Enter your email' : '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥á‡¥Æ‡µÜ‡¥Ø‡¥ø‡µΩ ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï'}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="type">
                    {language === 'en' ? 'Inquiry Type' : '‡¥Ö‡¥®‡µç‡¥µ‡µá‡¥∑‡¥£ ‡¥§‡¥∞‡¥Ç'} *
                  </label>
                  <select
                    id="type"
                    name="type"
                    value={formData.type}
                    onChange={handleInputChange}
                    required
                    className="form-select"
                  >
                    {inquiryTypes.map((type) => (
                      <option key={type.value} value={type.value}>
                        {type.label}
                      </option>
                    ))}
                  </select>
                </div>
                <div className="form-group">
                  <label htmlFor="subject">
                    {language === 'en' ? 'Subject' : '‡¥µ‡¥ø‡¥∑‡¥Ø‡¥Ç'} *
                  </label>
                  <input
                    type="text"
                    id="subject"
                    name="subject"
                    value={formData.subject}
                    onChange={handleInputChange}
                    required
                    className="form-input"
                    placeholder={language === 'en' ? 'Brief subject line' : '‡¥ö‡µÅ‡¥∞‡µÅ‡¥ô‡µç‡¥ô‡¥ø‡¥Ø ‡¥µ‡¥ø‡¥∑‡¥Ø ‡¥µ‡¥∞‡¥ø'}
                  />
                </div>
              </div>

              <div className="form-group">
                <label htmlFor="message">
                  {language === 'en' ? 'Message' : '‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç'} *
                </label>
                <textarea
                  id="message"
                  name="message"
                  value={formData.message}
                  onChange={handleInputChange}
                  required
                  rows="6"
                  className="form-textarea"
                  placeholder={language === 'en' ? 'Tell us how we can help you...' : '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Æ‡µÜ‡¥®‡µç‡¥®‡µç ‡¥û‡¥ô‡µç‡¥ô‡¥≥‡µã‡¥ü‡µç ‡¥™‡¥±‡¥Ø‡µÅ‡¥ï...'}
                />
              </div>

              <div className="form-actions">
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className={`btn btn--primary btn--large ${isSubmitting ? 'loading' : ''}`}
                >
                  {isSubmitting ? (
                    <>
                      <span className="loading-spinner"></span>
                      {language === 'en' ? 'Sending...' : '‡¥Ö‡¥Ø‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ...'}
                    </>
                  ) : (
                    language === 'en' ? 'Send Message' : '‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç ‡¥Ö‡¥Ø‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥ï'
                  )}
                </button>
              </div>

              {submitStatus && (
                <div className={`submit-status ${submitStatus}`}>
                  <div className="status-icon">
                    {submitStatus === 'success' ? 'Success' : 'Error'}
                  </div>
                  <div className="status-message">
                    {submitStatus === 'success' 
                      ? (language === 'en' 
                          ? 'Message sent successfully! We\'ll get back to you soon.' 
                          : '‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç ‡¥µ‡¥ø‡¥ú‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥Ö‡¥Ø‡¥ö‡µç‡¥ö‡µÅ! ‡¥û‡¥ô‡µç‡¥ô‡µæ ‡¥â‡¥ü‡¥®‡µÜ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥Ç.')
                      : (language === 'en'
                          ? 'Failed to send message. Please try again.'
                          : '‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç ‡¥Ö‡¥Ø‡¥Ø‡µç‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡¥ø‡¥≤‡µç‡¥≤. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.')
                    }
                  </div>
                </div>
              )}
            </form>
          </div>
        </div>
      </section>

      {/* Emergency Contact */}
      <section className="emergency-section">
        <div className="container">
          <div ref={el => contactRefs.current[5] = el} className="emergency-content">
            <div className="emergency-icon">üö®</div>
            <h2>
              {language === 'en' ? 'Emergency Blood Request?' : '‡¥Ö‡¥ü‡¥ø‡¥Ø‡¥®‡µç‡¥§‡¥∞ ‡¥∞‡¥ï‡µç‡¥§ ‡¥Ö‡¥≠‡µç‡¥Ø‡µº‡¥§‡µç‡¥•‡¥®?'}
            </h2>
            <p>
              {language === 'en'
                ? 'For urgent blood requests, call our emergency hotline immediately.'
                : '‡¥Ö‡¥ü‡¥ø‡¥Ø‡¥®‡µç‡¥§‡¥∞ ‡¥∞‡¥ï‡µç‡¥§ ‡¥Ö‡¥≠‡µç‡¥Ø‡µº‡¥§‡µç‡¥•‡¥®‡¥ï‡µæ‡¥ï‡µç‡¥ï‡µç, ‡¥û‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥Ö‡¥ü‡¥ø‡¥Ø‡¥®‡µç‡¥§‡¥∞ ‡¥π‡µã‡¥ü‡µç‡¥ü‡µç‚Äå‡¥≤‡µà‡¥®‡¥ø‡µΩ ‡¥â‡¥ü‡¥®‡µÜ ‡¥µ‡¥ø‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.'}
            </p>
            <a href="tel:+919847000000" className="btn btn--emergency">
              üìû {language === 'en' ? 'Call Emergency Line' : '‡¥Ö‡¥ü‡¥ø‡¥Ø‡¥®‡µç‡¥§‡¥∞ ‡¥≤‡µà‡µª ‡¥µ‡¥ø‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï'}
            </a>
          </div>
        </div>
      </section>

      {/* Back to Home */}
      <section className="back-home-section">
        <div className="container">
          <div className="back-home-content">
            <Link to="/" className="btn btn--outline btn--large">
              {language === 'en' ? 'Back to Home' : '‡¥π‡µã‡¥Æ‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡¥ü‡¥ô‡µç‡¥ô‡µÅ‡¥ï'}
            </Link>
          </div>
        </div>
      </section>
    </main>
  );
}
